name: build

permissions:
  contents: read

"on":
  push:
  pull_request:
  workflow_dispatch:

jobs:
  android-example:
    runs-on: ubuntu-latest
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      NDK_VERSION: 21.4.7075529
      API_LEVEL: 30
      BUILD_TOOLS: 30.0.3

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Python deps for TF configure
        run: |
          python -m pip install --upgrade pip
          python -m pip install "numpy==1.26.4" six

      # 自动修补 WORKSPACE：把 @gflags 映射到 @com_github_gflags_gflags
      - name: Patch WORKSPACE to map @gflags -> @com_github_gflags_gflags
        shell: bash
        run: |
          set -euo pipefail
          WS_FILE=""
          if [[ -f "WORKSPACE" ]]; then
            WS_FILE="WORKSPACE"
          elif [[ -f "WORKSPACE.bazel" ]]; then
            WS_FILE="WORKSPACE.bazel"
          else
            echo "ERROR: WORKSPACE file not found at repo root." >&2
            exit 1
          fi

          python - << 'PY'
import re, sys, pathlib
p = pathlib.Path("WORKSPACE")
if not p.exists():
    p = pathlib.Path("WORKSPACE.bazel")
txt = p.read_text(encoding="utf-8")

pat = re.compile(r'(git_repository\s*\(\s*name\s*=\s*"com_google_glog"[^)]*\))', re.DOTALL)
m = pat.search(txt)
if not m:
    print("No com_google_glog git_repository block found; skipping patch.")
    sys.exit(0)

block = m.group(1)
if "repo_mapping" in block:
    if '@gflags' not in block:
        block_new = re.sub(
            r'repo_mapping\s*=\s*\{',
            'repo_mapping = {\n        "@gflags": "@com_github_gflags_gflags",',
            block, count=1, flags=re.DOTALL
        )
    else:
        block_new = block
else:
    block_new = re.sub(
        r'\)\s*$',
        '    repo_mapping = {\n'
        '        "@gflags": "@com_github_gflags_gflags",\n'
        '    },\n'
        ')\n',
        block, count=1, flags=re.DOTALL
    )

if block_new != block:
    txt = txt.replace(block, block_new)
    p.write_text(txt, encoding="utf-8")
    print(f"Patched {p.name}: added/updated repo_mapping for com_google_glog.")
else:
    print("com_google_glog already has proper repo_mapping; no changes.")
PY

      - name: Set up Java 17 for Android cmdline-tools
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android cmdline-tools
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

      - name: Install Android SDK/NDK components
        run: |
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platforms;android-${API_LEVEL}" \
            "build-tools;${BUILD_TOOLS}" \
            "platform-tools" \
            "ndk;${NDK_VERSION}"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${NDK_VERSION}" >> $GITHUB_ENV

      - name: Switch to Java 11 for Bazel
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64 -o bazelisk
          chmod +x bazelisk
          sudo mv bazelisk /usr/local/bin/bazel
          bazel --version

      - name: Build Android App (fat APK)
        run: |
          PY_BIN="$(which python)"
          echo "Using PYTHON_BIN_PATH=$PY_BIN"
          bazel sync --configure
          bazel build -c opt \
            lyra/android_example:lyra_android_example \
            --fat_apk_cpu=armeabi-v7a,arm64-v8a \
            --copt=-DBENCHMARK \
            --repo_env=PYTHON_BIN_PATH="$PY_BIN"

      - name: Collect artifact
        run: |
          mkdir -p action-product
          cp bazel-bin/lyra/android_example/lyra_android_example.apk action-product/lyra_example-fat.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lyra-android-example-fat
          path: action-product/
