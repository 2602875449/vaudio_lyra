name: build-lyra-android-apk

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  android-arm64:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      NDK_VERSION: 21.4.7075529
      API_LEVEL: 30
      BUILD_TOOLS: 30.0.3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (Temurin 11)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Bazelisk
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64 -o bazelisk
          chmod +x bazelisk
          sudo mv bazelisk /usr/local/bin/bazel
          bazel --version

      - name: Install Android cmdline-tools
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          echo "y" | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

      - name: Install Android SDK/NDK components
        run: |
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platforms;android-${API_LEVEL}" \
            "build-tools;${BUILD_TOOLS}" \
            "platform-tools" \
            "ndk;${NDK_VERSION}"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/${NDK_VERSION}" >> $GITHUB_ENV

      - name: Prime Bazel cache (optional)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazel/_bazel_*
          key: bazel-${{ runner.os }}-ndk${{ env.NDK_VERSION }}-api${{ env.API_LEVEL }}-${{ hashFiles('**/WORKSPACE', '**/WORKSPACE.bazel', '**/MODULE.bazel', '**/.bazelrc') }}
          restore-keys: |
            bazel-${{ runner.os }}-

      - name: Build Android APK (arm64)
        shell: bash
        run: |
          # 关键：把 Python 传给 TensorFlow 的 fetch 阶段
          PY_BIN="$(which python)"
          echo "Using PYTHON_BIN_PATH=$PY_BIN"
          bazel build -c opt \
            lyra/android_example:lyra_android_example \
            --fat_apk_cpu=armeabi-v7a,arm64-v8a \
            --copt=-DBENCHMARK \
            --repo_env=PYTHON_BIN_PATH="$PY_BIN"

      - name: Collect artifact
        run: |
          mkdir -p action-product
          cp bazel-bin/lyra/android_example/lyra_android_example.apk action-product/lyra_android_example-arm64.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lyra-android-example-arm64
          path: action-product/
